" get all of the plugins
source ~/.pr_vimrc_plug

"-----------------------
" airblade/vim-gitgutter
"-----------------------
" TODO disables default key maps why
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 1000
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
let g:gitgutter_diff_args = '--ignore-space-at-eol'
nnoremap <S-F5> :GitGutterToggle<CR>
nnoremap <S-F6> :GitGutterSignsToggle<CR>
nnoremap <S-F7> :GitGutterLineHighlightsToggle<CR>
nmap <silent> ]h :GitGutterNextHunk<CR>
nmap <silent> [h :GitGutterPrevHunk<CR>
nnoremap <silent> <leader>ggr :GitGutterRevertHunk<CR>
nnoremap <silent> <leader>ggp :GitGutterPreviewHunk<CR>
nnoremap <silent> <leader>gga :GitGutterAll<CR>

"------------------
" ervandew/supertab
"------------------
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']

"-------------
" fatih/vim-go
"-------------
" Default: auto-detect a snippet engine
let g:go_snippet_engine = "ultisnips"

" Default: gofmt; using goimports extends functionality
let g:go_fmt_command = "goimports"
" Default: show a location list when gofmt fails
let g:go_fmt_fail_silently = 1

" Default: empty; set to quickfix so there is one method for navigation
let g:go_list_type = "quickfix"

" Default: guru; use gopls for :GoDef
let g:go_def_mode='gopls'
" Default: gocode; use gopls for :GoInfo
let g:go_info_mode='gopls'
" Default: show gopls won't work outside GOPATH warning
let g:go_null_module_warning = 0
" Default: work with newly modified GOPATH; detect before using gopls
let g:go_autodetect_gopath = 1

" Default: set :GoTest timeout to 10 seconds
let g:go_test_timeout = '10s'
" Default: do not prepend name of test to error message
let g:go_test_prepend_name = 1

" Default: highlight all instances of identifier under cursor
" let g:go_auto_sameids = 0
" Default: do not show :GoInfo for word under cursor
" TODO Enable if you do not find it too slow
" let g:go_auto_type_info = 0
" Default: echo info about Go commands like :GoBuild, :GoTest, :GoCoverage
let g:go_echo_command_info = 1

" Default: enable vet, golint and errcheck as linters for :GoMetaLinter
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck', 'gosec']
" Default: do not execute :GoMetaLinter on save
let g:go_metalinter_autosave = 0
" Default: set maximum time linters have to complete to 5 seconds
let g:go_metalinter_deadline = "5s"

" Default: treat comments above function as part of function
let g:go_textobj_include_function_doc = 1
" Default: use source files instead of binary packages for code completion
let g:go_gocode_propose_source = 1
" Default: snakecase: transform option for gomodifytags or snippet expansion
let g:go_addtags_transform = 'camelcase'
" Default: block, import, varconst, package_comment; enable fold regions
let g:go_fold_enable = []

" Default: do not highlight struct and interface names
let g:go_highlight_types = 1
" Default: do not highlight struct field names
let g:go_highlight_fields = 1
" Default: do not highlight function and method declarations
let g:go_highlight_functions = 1
" Default: do not highlight function and method calls
let g:go_highlight_function_calls = 1
" Default: do not highlight operators such as := , ==, -=, etc
let g:go_highlight_operators = 1
" Default: do not highlight commonly used library types (io.Reader, etc.)
let g:go_highlight_extra_types = 1
" Default: do not highlight build constraints
let g:go_highlight_build_constraints = 1
" Default: do not highlight go:generate directives
let g:go_highlight_generate_tags = 1
" Default: do not highlight instances of tabs following spaces
let g:go_highlight_space_tab_error = 1
" Default: do not highlight white space after []
let g:go_highlight_array_whitespace_error = 0
" Default: do not highlight trailing white space
let g:go_highlight_trailing_whitespace_error = 1

" Default: highlight printf-style formatting verbs inside string literals
let g:go_highlight_format_strings = 0

" Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

augroup go
  autocmd!
  " Write file before :make, :GoBuild, :GoTest|Func, :GoRun
  autocmd FileType go set autowrite
  " go fmt uses tabs for indentation, ts and sw only affect viewer
  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  " Enable Vim syntax highlighting for Go template files
  " Or add to files: {{/* vim: set filetype=gotexttmpl: */ -}}
  autocmd BufRead,BufNewFile *.gotmpl set filetype=gotexttmpl

  " Map quickfix (list) navigation
  autocmd FileType go nnoremap <silent> <C-j> :cnext<CR>
  autocmd FileType go nnoremap <silent> <C-k> :cprev<CR>
  autocmd FileType go nnoremap <silent> <C-c> :cclose<CR>

  autocmd FileType go nmap     <silent> <leader>gae <Plug>(go-alternate-edit)
  autocmd FileType go nnoremap <silent> <leader>gat :GoAddTags<CR>
  autocmd FileType go nmap     <silent> <leader>gb :<C-u>call <SID>build_go_files()<CR>
  autocmd FileType go nnoremap <silent> <leader>gcb :GoCoverageBrowser<CR>
  autocmd FileType go nmap     <silent> <leader>gct <Plug>(go-coverage-toggle)
  autocmd FileType go nnoremap <silent> <leader>gd :GoDecls<CR>
  autocmd FileType go nnoremap <silent> <leader>gdb :GoDebugStart<CR>
  autocmd FileType go nmap     <silent> <leader>gdc <Plug>(go-doc)
  autocmd FileType go nnoremap <silent> <leader>gdd :GoDeclsDir<CR>
  autocmd FileType go nmap     <silent> <leader>gde <Plug>(go-describe)
  autocmd FileType go nnoremap <silent> <leader>gdf :GoDef<CR>
  autocmd FileType go nmap     <silent> <leader>gdp <Plug>(go-deps)
  autocmd FileType go nnoremap <silent> <leader>gdr :GoDrop<CR>
  autocmd FileType go nmap     <silent> <leader>gds <Plug>(go-def-split)
  autocmd FileType go nmap     <silent> <leader>gdt <Plug>(go-def-tab)
  autocmd FileType go nmap     <silent> <leader>gdv <Plug>(go-def-vertical)
  autocmd FileType go nnoremap <silent> <leader>gec :GoErrCheck<CR>
  autocmd FileType go nmap     <silent> <leader>gf <Plug>(go-files)
  autocmd FileType go nnoremap <silent> <leader>gfs :GoFillStruct<CR>
  autocmd FileType go nmap     <silent> <leader>gfv <Plug>(go-freevars)
  autocmd FileType go nmap     <silent> <leader>gi <Plug>(go-install)
  autocmd FileType go nmap     <silent> <leader>gie <Plug>(go-iferr)
  autocmd FileType go nmap     <silent> <leader>gim <Plug>(go-imports)
  autocmd FileType go nmap     <silent> <leader>gin <Plug>(go-info)
  autocmd FileType go nmap     <silent> <leader>gip <Plug>(go-import)
  autocmd FileType go nnoremap <silent> <leader>gk :GoKeyify<CR>
  autocmd FileType go nmap     <silent> <leader>gl <Plug>(go-lint)
  autocmd FileType go nmap     <silent> <leader>gm <Plug>(go-metalinter)
  autocmd FileType go nnoremap <silent> <leader>gmp :GoImpl<CR>
  autocmd FileType go nmap     <silent> <leader>gms <Plug>(go-implements)
  autocmd FileType go nnoremap <silent> <leader>gp :GoPath<CR>
  autocmd FileType go nnoremap <silent> <leader>gpl :GoPlay<CR>
  autocmd FileType go nmap     <silent> <leader>gpt <Plug>(go-pointsto)
  autocmd FileType go nmap     <silent> <leader>gr <Plug>(go-run)
  autocmd FileType go nmap     <silent> <leader>gre <Plug>(go-rename)
  autocmd FileType go nmap     <silent> <leader>grf <Plug>(go-referrers)
  autocmd FileType go nnoremap <silent> <leader>grt :GoRemoveTags<CR>
  autocmd FileType go nnoremap <silent> <leader>gs :GoSameIdsToggle<CR>
  autocmd FileType go nmap     <silent> <leader>gt <Plug>(go-test)
  autocmd FileType go nmap     <silent> <leader>gtf <Plug>(go-test-func)
  autocmd FileType go nmap     <silent> <leader>gv <Plug>(go-vet)
  autocmd FileType go nnoremap <silent> <leader>gwe :GoWhicherrs<CR>

  " :GoAlternate between implementation/test code, like main.go and main_test.go
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabedit')

  " Shorter mappings for more common vim-go commands
  " TODO why M instead of m? why u instead of f? why y instead of k?
  autocmd FileType go nmap     <silent> <leader>b :<C-u>call <SID>build_go_files()<CR>
  autocmd FileType go nmap     <silent> <leader>c <Plug>(go-coverage-toggle)
  autocmd FileType go nnoremap <silent> <leader>C :GoCoverageBrowser<CR>
  autocmd FileType go nmap     <silent> <leader>d <Plug>(go-doc)
  autocmd FileType go nmap     <silent> <leader>D <Plug>(go-doc-browser)
  autocmd FileType go nmap     <silent> <leader>e <Plug>(go-iferr)
  autocmd FileType go nmap     <silent> <leader>i <Plug>(go-implements)
  autocmd FileType go nnoremap <silent> <leader>I :GoImpl<CR>
  autocmd FileType go nmap     <silent> <leader>M <Plug>(go-metalinter)
  autocmd FileType go nmap     <silent> <leader>r <Plug>(go-run)
  autocmd FileType go nmap     <silent> <leader>R <Plug>(go-rename)
  autocmd FileType go nmap     <silent> <leader>t <Plug>(go-test-func)
  autocmd FileType go nnoremap <silent> <leader>u :GoFillStruct<CR>
  autocmd FileType go nnoremap <silent> <leader>y :GoKeyify<CR>

augroup END

"----------------------
" itchyny/lightline.vim
"----------------------
set laststatus=2
set updatetime=100
set noshowmode " mode shown in lightline status

" %< in fileformat compresses long status lines from that point
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste', 'readonly' ],
  \             [ 'gitbranch', 'filename', 'modified' ], [ 'gostatus' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \ },
  \ 'component': {
  \   'gostatus': '%#goStatuslineColor#%{LightlineGo()}',
  \   'fileformat': '%<%{&ff}',
  \ },
  \ 'component_type': {
  \   'gostatus': 'raw',
  \ },
  \ }

function! LightlineGo()
  return exists('*go#statusline#Show') ? go#statusline#Show() : ''
endfunction

"-----------------
" junegunn/fzf.vim
"-----------------
" TODO had to add prefix back due to command name conflicts
" Thus added mapping for all of the fzf commands
let g:fzf_command_prefix="Fzf"
let g:fzf_layout = { 'down': '~50%' }

noremap <leader>za :FzfAg<CR>
noremap <leader>zb :FzfBCommits<CR>
noremap <leader>zbl :FzfBLines<CR>
noremap <leader>zbt :FzfBTags<CR>
noremap <leader>zbu :FzfBuffers<CR>
noremap <leader>zc :FzfCommits<CR>
noremap <leader>zC :FzfCommands<CR>
noremap <leader>zco :FzfColors<CR>
noremap <leader>zf :FzfFiles<CR>
noremap <leader>zft :FzfFiletypes<CR>
noremap <leader>zg :FzfGFiles?<CR>
noremap <leader>zh :FzfHistory<CR>
noremap <leader>zht :FzfHelptags<CR>
noremap <leader>zl :FzfLines<CR>
noremap <leader>zlo :FzfLocate<CR>
noremap <leader>zm :FzfMaps<CR>
noremap <leader>zmk :FzfMarks<CR>
noremap <leader>zr :FzfRg<CR>
noremap <leader>zs :FzfSnippets<CR>
noremap <leader>zt :FzfTags<CR>
noremap <leader>zw :FzfWindows<CR>

let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "*.{js,json,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"
  \ -g "!{.git,node_modules,vendor}/*" '

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

command! -bang -nargs=* F call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

"------------------
" majutsushi/tagbar
"------------------
let g:tagbar_compact = 1
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
let g:tagbar_width = 30
nmap <S-F10> :TagbarToggle<CR>

"--------------------
" scrooloose/nerdtree
"--------------------
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\\.swo$', '\\.swp$', '\\.git']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
noremap <S-F8> :NERDTreeToggle<CR>
noremap <leader>nt :NERDTreeFind<CR>

"-----------------
" SirVer/ultisnips
"-----------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" TODO the plugged directory is for plugins
" does this even need to be set?
" let g:UltiSnipsSnippetsDir="~/.vim/plugged/vim-snippets/UltiSnips"
" let g:UltiSnipsSnippetsDir="~/.vim/ultisnips"
let g:UltiSnipsEditSplit="vertical"
" Map UltiSnips open edit window
nmap <leader>se :UltiSnipsEdit<cr>
nmap <leader>sb :UltiSnipsEdit!<cr>

"-------------------
" tpope/vim-fugitive
"-------------------
nnoremap <leader>G :Git!<Space>
nnoremap <leader>Ga :Git add .<CR>
nnoremap <leader>Gau :Git add --update<CR>
nnoremap <leader>Gb :Gblame<CR>
nnoremap <leader>Gc :Gcheckout<CR>
nnoremap <leader>Gc- :Git checkout -<CR>
nnoremap <leader>Gcm :Git checkout master<CR>
nnoremap <leader>Gc :Gcommit<CR>
nnoremap <leader>Gcn :Gcommit -n<CR> " commit but ignore hooks
nnoremap <leader>Gd :Gdiff<CR>
nnoremap <leader>Gdo :Gdiffoff<CR>
nnoremap <leader>Ge :Gedit<CR>
nnoremap <leader>Ges :Gedit<Space>
nnoremap <leader>Gf :Gfetch<CR>
nnoremap <leader>Gg :silent Ggrep! <cword><CR>
nnoremap <leader>Gl :GV!<CR> " git log for the current file
nnoremap <leader>Glf :GV<CR> " full git log
nnoremap <leader>Gm :Gmove<Space>
nnoremap <leader>Gp :Git! push<CR>
nnoremap <leader>Gpf :Gpush --force-with-lease<CR>
nnoremap <leader>Gpl :Git! pull<CR>
nnoremap <leader>Gr :Gread<CR>
nnoremap <leader>Grb :Grebase -i master<CR>
nnoremap <leader>Grm :Gremove<CR>
nnoremap <leader>Gs :Gstatus<CR>
nnoremap <leader>Gv :Gvdiff<CR>
nnoremap <leader>Gw :Gwrite<CR> " git add

"---------------
" wincent/ferret
"---------------
let g:FerretExecutableArguments = {
  \'rg': '--smart-case --vimgrep --no-heading --no-config --max-columns 4096'}

" Don't bind ferret commands.
let g:FerretMap = 0

" Highlight search 1 true 0 false
let g:FerretHlsearch = 1

" match only on word boundaries
" 1 true 0 false
let g:FerretAckWordWord = 0

" Don't hide cursor line in quickfix.
let g:FerretQFOptions = 0

" Bind our own Ferret commands.
nmap <leader>fa <Plug>(FerretAck)
nmap <leader>fw <Plug>(FerretAckWord)
nmap <leader>fl <Plug>(FerretLack)
nmap <leader>fs <Plug>(FerretAcks)

"----------------------------
" Xuyuanp/nerdtree-git-plugin
"----------------------------
" Override the default symbols
let g:NERDTreeIndicatorMapCustom = {
  \ 'Modified'  : 'M',
  \ 'Staged'    : 'S',
  \ 'Untracked' : '*',
  \ 'Renamed'   : 'R',
  \ 'Unmerged'  : 'U',
  \ 'Deleted'   : '!',
  \ 'Dirty'     : 'D',
  \ 'Clean'     : 'C',
  \ 'Ignored'   : 'I',
  \ 'Unknown'   : '?'
\ }

" vim: filetype=vim
